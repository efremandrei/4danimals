pipeline {
    agent any

    parameters {
        string(name: 'GITHUB_USER', defaultValue: 'efremandrei', description: 'GitHub Username')
        password(name: 'GITHUB_PASSWORD', defaultValue: 'Btet050487!', description: 'GitHub Password')
        string(name: 'GITHUB_REPO', defaultValue: '4danimals', description: 'GitHub Repository Name')
        string(name: 'DOCKERHUB_USER', defaultValue: 'andreie', description: 'DockerHub Username')
        password(name: 'DOCKERHUB_PASSWORD', defaultValue: 'And0504efR', description: 'DockerHub Password')
        booleanParam(name: 'RUN_CLEANUP', defaultValue: false, description: 'Run cleanup of resources after pipeline completion')
    }

    environment {
        GITHUB_USER = "${params.GITHUB_USER}"
        GITHUB_PASSWORD = "${params.GITHUB_PASSWORD}"
        GITHUB_REPO = "${params.GITHUB_REPO}"
        DOCKERHUB_USER = "${params.DOCKERHUB_USER}"
        DOCKERHUB_PASSWORD = "${params.DOCKERHUB_PASSWORD}"
        TIMESTAMP = new Date().format("yyyyMMddHHmmss")
        IMAGE_NAME = "${params.DOCKERHUB_USER}/4danimals:${env.TIMESTAMP}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the GitHub repository
                    checkout([$class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[url: "https://github.com/${env.GITHUB_USER}/${env.GITHUB_REPO}.git",
                                            credentialsId: 'github-credentials']]
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh 'docker build -t ${IMAGE_NAME} .'
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Determine the next available container name
                    def containerIndex = 1
                    def containerName = "test_container_${containerIndex}"
                    while (sh(script: "docker ps -a --format '{{.Names}}' | grep -w ${containerName}", returnStatus: true) == 0) {
                        containerIndex++
                        containerName = "test_container_${containerIndex}"
                    }

                    // Find an available port
                    def port = 8081
                    while (sh(script: "docker ps --format '{{.Ports}}' | grep -w ${port}->8080", returnStatus: true) == 0) {
                        port++
                    }

                    // Run the Docker container
                    sh "docker run -d --name ${containerName} --network my_bridge_network -p ${port}:8080 ${IMAGE_NAME}"
                    // Wait for 20 seconds to allow the container to start
                    sleep 20
                    echo sh(script: 'docker ps -a', returnStdout: true).trim()
                    
                    // Save port and container name for later stages
                    env.CONTAINER_NAME = containerName
                    env.PORT = port.toString()
                    env.CONTAINER_INDEX = containerIndex.toString()
                }
            }
        }

        stage('Verify Container is Up') {
            steps {
                script {
                    // Verify the container is up
                    def containerStatus = sh(script: "docker ps -a --filter 'name=${env.CONTAINER_NAME}' --format '{{.Status}}'", returnStdout: true).trim()
                    if (containerStatus.contains("Up")) {
                        echo "Container is running: ${containerStatus}"
                    } else {
                        error "Container is not running. Current status: ${containerStatus}"
                    }
                }
            }
        }

        stage('Test Container') {
            steps {
                script {
                    // Retry up to 3 times, waiting 10 seconds between attempts
                    retry(3) {
                        try {
                            // Test the container by sending a GET request to the main page
                            def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" http://test_container_${env.CONTAINER_INDEX}:8080", returnStdout: true).trim()
                            echo "curl response: ${response}"  // Add debug information
                            if (response != '200') {
                                error "Failed to get a 200 response. Got ${response} instead."
                            } else {
                                echo "Successfully received a 200 response."
                            }
                        } catch (Exception e) {
                            echo "Attempt to access container on port ${env.PORT} failed. Retrying in 10 seconds..."
                            sleep 10
                            throw e
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to DockerHub
                    sh 'echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin'
                    sh 'docker push ${IMAGE_NAME}'
                }
            }
        }
    }

    post {
        always {
            script {
                if (params.RUN_CLEANUP) {
                    // Stop and remove the Docker container
                    sh "docker stop ${env.CONTAINER_NAME} || true"
                    sh "docker rm ${env.CONTAINER_NAME} || true"

                    // Remove all Docker images
                    sh 'docker rmi $(docker images -q) || true'

                    // Clean up Docker system
                    sh 'docker system prune -f || true'

                    // Delete the cloned repository
                    deleteDir()
                }
            }
        }
        success {
            echo 'Pipeline PASSED'
        }
        failure {
            echo 'Pipeline FAILED'
        }
    }
}
